require( 'debug-trace' )({ always: true } );

var apn = require('apn');
var env_file = require("env.json");
var tls = require('tls');
var crypto = require('crypto');
var fs = require('fs');
var async = require('async');
var config = env_file.environments[process.env['NODE_ENV']];
var cloneextend = require('cloneextend');

module.exports = SnpApn;
function SnpApn(options) {
	this._Apn = {
		cert : config.apn.pem,
		key : config.apn.pem,
		gateway : config.apn.gateway,
    };
    
    this._Gcm   = {
        api_key : config.apn.gcm,
    };
}

var lUser = require("SnpUser");
var lUtilities = require("SnpUtilities");
var SnpUser = new lUser();
var SnpUtilities = new lUtilities();
var lNotifications = require("SnpNotifications");
var SnpNotifications = new lNotifications();
var idCounter = 0;

SnpApn.prototype.sendApn = function(push, sender, recipient, sendermessage, recipientmessage, call_back) {
	var self = this;
	//console.log(arguments);
	var lUtilities = require("SnpUtilities");
	var SnpUtilities = new lUtilities();

	async.waterfall([
		function(cb) {
			push.aps.alert = recipientmessage;
			push.meta.ruid = recipient;
			SnpNotifications.addToQueue(sender, recipient, SnpUtilities.cleanPayload(push), function(nid) {
				SnpNotifications.getTabNotifications(recipient, function(badge) {
					push.meta.notid = nid;
					push.aps.badge = badge.total;
					push.meta.ruid = recipient;
					SnpNotifications.updateQueue(nid, push, function() {
						SnpUser.getDeviceTokens(recipient, function(device_tokens) {
						    console.log("sending for recipient id : ", recipient);
							var iter = function(item, callback) {
							    
                                if( item.device_type == "ANDROID" ){
                                    SnpApn.prototype.SendGsmNotification(push, item.device_token, function(){});
                                }else{
                                    SnpApn.prototype.SendAsObject(push, item.device_token, self._Apn, function(){});
                                }
                                callback(null, true);
                             /*SnpApn.prototype.SendAsObject(push, item.device_token, self._Apn, function(){});
								callback(null, true);*/
							};
							SnpNotifications.addToQueueDevice(nid, device_tokens, function() {});
							async.map(device_tokens, iter, function(err, result) {
								cb(null);
							});
						});
					});
				});
			});
		},
		function(cb) {
			push.aps.alert = sendermessage;
			push.meta.ruid = sender;
			SnpNotifications.addToQueue(0, sender, SnpUtilities.cleanPayload(push), function(nid) {
				SnpNotifications.getTabNotifications(sender, function(badge) {
					push.meta.notid = nid;
					push.aps.badge = badge.total;
					//console.log("push after badge-sender: " + badge.total);
					//console.log(push);
					SnpNotifications.updateQueue(nid, push, function() {


						push.meta.notid = nid;
						push.meta.ruid = sender;
						SnpUser.getDeviceTokens(sender, function(device_tokens) {
							console.log("sending for sender id : ", sender);
							var iter = function(item, callback) {
							 if( item.device_type == "ANDROID" ){
                                SnpApn.prototype.SendGsmNotification(push, item.device_token, function(){});
                            }else{
                                SnpApn.prototype.SendAsObject(push, item.device_token, self._Apn, function(){});
                            }
                            callback(null, true);
							     /*SnpApn.prototype.SendAsObject(push, item.device_token, self._Apn, function(){});
							     callback(null, true);*/
							};
							SnpNotifications.addToQueueDevice(nid, device_tokens, function() {});
							async.map(device_tokens, iter, function(err, result) {
								cb(null);
							});
						});
					});
				});
			});
		}
	], function(err, res) {});
};

SnpApn.prototype.QueueApn = function(sender, recipient, spush, callback) {
	SnpNotifications.addToQueue(sender, recipient, spush, function(nid) {
		SnpNotifications.getTabNotifications(recipient, function(badge) {
			spush.meta.notid = nid;
			spush.aps.badge = badge.total;
			spush.meta.ruid = recipient;
			SnpNotifications.updateQueue(nid, spush, function() {
				callback(nid, spush);
				SnpUser.getDeviceTokens(sender, function(device_tokens) {
					var iter = function(item, cb) {
					   /*
                       if( item.device_type == "ANDROID" ){
                            SnpApn.prototype.SendGsmNotification(mpush, item.device_token, function(){
								cb(null, true);
							});
                        }else{
                            SnpApn.prototype.SendAsObject(mpush, item.device_token, self._Apn, function(){
								cb(null, true);
							});
                        }
                       */
						SnpApn.prototype.QueueSend(item, item.device_token, spush, function() {
							cb(null, true);
						});
					};
					SnpNotifications.addToQueueDevice(nid, device_tokens, function() {});
					async.map(device_tokens, iter, function(err, result) {

					});
				});
			});
		});
	});
};

SnpApn.prototype.QueueSend = function(uid, token, payload, cb) {
	connection.query("INSERT INTO apn_queue SET user_id = ?, device_token = ?, payload = ?, queue_date = NOW()",
		[uid, toekn, JSON.stringify(payload)], function(err, res) {
			if (err) throw err;
			if(typeof "cb" == "function") cb(true);
	});
};


SnpApn.prototype.newSendApn = function(mpush, recipient, cb) {
	var self = this;
	SnpUser.getDeviceTokens(recipient, function(device_tokens) {
		if (!device_tokens.length) {
			return cb(null);
		} else {
			var iter = function(item, scallback) {

				nSnpApn = new SnpApn();
                if( item.device_type == "ANDROID" ){
                    nSnpApn.SendGsmNotification(mpush, item.device_token, function(){
						scallback(null, true);
					});
                }else{
                    nSnpApn.SendAsObject(mpush, item.device_token, self._Apn, function(){
						scallback(null, true);
					});
                }
				/*nSnpApn.SendAsObject(mpush, item.device_token, self._Apn, function(){
					scallback(null, true);
				});*/
			};
			SnpNotifications.addToQueueDevice(mpush.meta.notid, device_tokens, function() {
				async.eachSeries(device_tokens, iter, function(err, result) {
					console.log("==+== doing callback from newSendSpn");
					cb(true);
				});
			});
		}
	});
};


SnpApn.prototype.SendSingle = function(mpush, recipient, cb) {
	var self = this;
	mpush.meta.ruid = recipient;
	SnpNotifications.addToQueue(mpush.meta.sid, recipient, mpush, function(nid) {
		SnpNotifications.getTabNotifications(recipient, function(badge) {
			mpush.meta.notid = nid;
			mpush.aps.badge = badge.total;
			//console.log("push after badge: " + badge.total);
			//console.log(mpush);
			SnpNotifications.updateQueue(nid, mpush, function() {


				mpush.meta.notid = nid;
				mpush.meta.ruid = recipient;
				//console.log("\n\n\nSendSingle.push()");
				//console.log("ruid: " + mpush.meta.ruid);
				//console.log("SendSingle! get Device Tokens {");
				//var SnpUser = new lUser();
                //console.log("recipient");
                //console.log(recipient);
                
                var lonline = require("SnpOnlineDevices");
                SnpOnlineDevices = new lonline();
                SnpOnlineDevices.getUserOnlineDevices(recipient, function(devices){
                    //console.log('devices');
                    //console.log(devices);
                    var offlineDevices = devices.offline;
                    console.log("offline devices for user :", recipient);
                    console.log(offlineDevices);
                    if (!offlineDevices.length) {
                        return cb(null);
					}else{
					   var iter = function(item, scallback) {
                            //console.log("type : ", item.device_type, " token : ", item.device_token);
							nSnpApn = new SnpApn();
                            if( typeof( item.device_type ) !== "undefined" && typeof( item.device_token ) !== "undefined" ){
                                if( item.device_type == "ANDROID" ){
                                    nSnpApn.SendGsmNotification(mpush, item.device_token, function(){
        								scallback(null, true);
        							});
                                }else{
                                    nSnpApn.SendAsObject(mpush, item.device_token, self._Apn, function(){
        								scallback(null, true);
        							});
                                }
                            }else{
                                //console.log("else : token type : ", typeof( item.device_token ), "token : ", item.device_token);
                                scallback(null, true);
                            }
                        };
						SnpNotifications.addToQueueDevice(nid, offlineDevices, function() {
							async.eachSeries(offlineDevices, iter, function(err, result) {
								//console.log("==+== doing callback from SendSingle");
								cb(nid);
							});
						});
					}
                });
                
				/*SnpUser.getDeviceTokens(recipient, function(device_tokens) {
					console.log('device_tokens');
                    console.log(device_tokens);
					//console.log(" }");
					if (!device_tokens.length) {
						return cb(null);
					} else {
						var iter = function(item, scallback) {

							nSnpApn = new SnpApn();
                            if( item.device_type == "ANDROID" ){
                                nSnpApn.SendGsmNotification(mpush, item.device_token, function(){
    								scallback(null, true);
    							});
                            }else{
                                nSnpApn.SendAsObject(mpush, item.device_token, self._Apn, function(){
    								scallback(null, true);
    							});
                            }
    							
						};
						SnpNotifications.addToQueueDevice(nid, device_tokens, function() {
							async.eachSeries(device_tokens, iter, function(err, result) {
								//console.log("==+== doing callback from SendSingle");
								cb(nid);
							});
						});
					}
				});*/
			});
		});
	});
};

SnpApn.prototype.SendAsObject = function(payload, token, options, cb) {
    console.log("apn called with token : ", token);
	var apnConnection = new apn.Connection(options);
	var pl = JSON.stringify(payload);
	var paylo = JSON.parse(pl);
	if (pl.length > 243) {
		while (pl.length > 243) {
			var altlen = paylo.aps.alert.length;
			paylo.aps.alert = paylo.aps.alert.substring(0,altlen - 1);
			pl = JSON.stringify(paylo);
		}
		paylo.aps.alert = paylo.aps.alert + "...";
	}
	var device = new apn.Device(token);
	paylo.aps.alert = paylo.aps.alert.replace(/'/,"\'");

	var note = new apn.Notification();
	note.badge = payload.aps.badge;
	note.sound = payload.aps.sound;
	note.alert = paylo.aps.alert;
	note.payload = paylo;
	//console.log("--=--=--== Send via APN ==--=--=--");
	//console.log(paylo);
	//console.log("-- payload length --");
	//console.log(JSON.stringify(paylo).length);
	//console.log("note.alert: " + note.alert.length);
	//console.log("alert length: " + paylo.aps.alert.length);

	//console.log("END APN SEND");
	var result = apnConnection.pushNotification(note, device);
	cb(result);
};


SnpApn.prototype.SendGsmNotification = function(payload, token, cb) {
    console.log("GCM called with token : ", token);
    var self = this;
    var gcm = require('node-gcm');
    //var sender = new gcm.Sender(this._Gcm.api_key);
    var sender = new gcm.Sender(config.apn.gcm);
    var registrationIds = [];
    
    registrationIds.push( token );
    //format the payload
    var pl = JSON.stringify(payload);
	var paylo = JSON.parse(pl);
	if (pl.length > 243) {
		while (pl.length > 243) {
			var altlen = paylo.aps.alert.length;
			paylo.aps.alert = paylo.aps.alert.substring(0,altlen - 1);
			pl = JSON.stringify(paylo);
		}
		paylo.aps.alert = paylo.aps.alert + "...";
	}
	//var device = new apn.Device(token);
	paylo.aps.alert = paylo.aps.alert.replace(/'/,"\'");
    
    //init the message
    var message = new gcm.Message({
        collapseKey: 'SnP',
        delayWhileIdle: true,
        timeToLive: 3,
        data: paylo
    });
    
    //console.log("--=--=--== Send via GCM ==--=--=--");
	//console.log(message);
	//console.log("-- payload length --");
	//console.log(JSON.stringify(message).length);
	//console.log("note.alert: " + message.data.alert.length);
	//console.log("alert length: " + message.data.aps.alert.length);

	//console.log("END GCM SEND");
	/**
    * Params: message-literal, registrationIds-array, No. of retries, callback-function
    **/
    sender.send(message, registrationIds, 4, function (err, result) {
        console.log(result);
        cb(result);
    });
	
};

SnpApn.prototype.Send = function(payload, token, msg, badge, sound) {
		var apnConnection = new apn.Connection(this._options);
		var device = new apn.Device(token);

		var note = new apn.Notification();
		note.badge = badge ? badge : 1;
		//note.sound = sound ? sound : "default";
		note.alert = msg;
		note.payload = payload;
		var result = apnConnection.pushNotification(note, device);
		return result;
};


SnpApn.prototype.createPayload = function(message, badge, sound, addl) {
		var payload = {};
		payload.meta = {};

		//if (message && message.length > 100) {
		//	 payload.meta.istrunc = true;
		//	 message = message.substring(0,100);
		//}
		payload.aps = {};
		payload.aps.alert = message;
		payload.aps.badge = badge ? badge : 1;
		payload.aps.sound = sound ? sound : "default";

		if (addl) {
			for (var i in addl) {
				payload[i] = addl[i];
			}
		}
		return payload;
};

SnpApn.prototype.SendToUser = function(uid, recipient, message, meta, badge, nid, callback) {
	var lUser = require("SnpUser");
	var lNotifications = require("SnpNotifications");
	var SnpUser = new lUser();
	var SnpNotifications = new lNotifications();
	var self = this;
    var result;
	console.log("message: " + message);
	SnpUser.getDeviceTokens(recipient, function (rows) {
		for ( var i in rows) {
			var dt = rows[i].device_token;
			SnpNotifications.addDeviceToQueue(nid, dt);
			var payload = SnpApn.prototype.createPayload(message, badge);
            if( rows[i].device_type == "ANDROID" ){
                result = SnpApn.prototype.SendGsmNotification(payload, dt);
            }else{
                result = SnpApn.prototype.Send(payload, dt, message, badge);    
            }
			
			if (!result) {
				SnpNotifications.addFailed(recipient, uid, meta.type, message, meta);
			}
		}
		callback(true);
	});
};

SnpApn.prototype.SendToAllDevices = function(uid, push, callback){
    console.log("SendToAllDevices", push);
    var self = this;
    console.log("uid: " + uid);
    console.log("push: " + push);
    SnpUser.getDeviceTokens(uid, function (rows) {
        async.each(rows, function(item, ck){
            if( typeof( item.device_type ) !== "undefined" && typeof( item.device_token ) !== "undefined" ){
                if( item.device_type == "ANDROID" ){
                    SnpApn.prototype.SendGsmNotification(push, item.device_token, function(){
						ck();
					});
                }else{
                    SnpApn.prototype.SendAsObject(push, item.device_token, self._Apn, function(){
						ck();
					});
                }
            }else{
                ck();
            }
        },function(err){
            console.log("PUSH sent to all device of :", uid);
        });
        callback(true);
	});
};
